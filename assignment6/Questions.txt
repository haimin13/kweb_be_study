Q1. 다음 코드에서 어떤 상황일 때 이 미들웨어가 실행되나요?
A.
next함수에 인자를 넣어 실행할 때 호출된다.

Q2. 이 함수가 실행되기 위한 조건은 무엇인가요?
A.
서버 실행 코드에서 해당 함수가 포함된 모듈을 import한다. 서버 실행중 에러가 발생했을 경우, 동기적 코드에서는 express가 자동으로 에러처리 미들웨어로 넘어가지만, 비동기 코드에서는 try catch문을 사용해 직접 next(err);를 통해 호출하거나, 관련 라이브러리를 사용해야한다.

Q3. 위와 같은 ‘next(err)‘ (errorHandler)호출의 장점은 무엇인가요? 교재에서 답을 찾아 ’똑같이’ 적어주세요. 추가적인 설명을 덧붙이는 것은 환영합니다.
A. 
이러한 에러 처리 방식을 이용하면 다른 미들웨어에서 발생한 에러를 즉시 처리하지 않아도 되고, 200 OK가 아닌 다른 상태에 해당하는 응답을 보낼 때 고의로 원하는 상태에 해당하는 에러를 발생시킬 수도 있어 코드의 가독성을 향상시킨다.

Q4. 이러한 코드는 코드 유지보수 측면에서 어떤 이점을 줄까요?
A.
에러 처리 코드를 한 미들웨어로 관리할 수 있어서 좋고, 새로운 에러를 처리할 때 코드를 덧붙이기만 하면 돼서 편하다.

Q5. 400, 401, 404, 500은 각각 어떤 에러인가요? 어떤 상황에서 사용하면 좋을지 그 시나리오를 각각 제시해보세요.
A.
400 Bad Request: 요청한 데이터의 형태가 잘못되어, 요청을 수행할 수 없음 (ex. 쿼리가 정수만 처리할 수 있는데 문자열 값이 들어옴)
401 Unauthorized: 인증이 실패하거나 이루어지지 않아, 요청을 수행할 수 없음 (ex. 로그인해야 들어갈 수 있는 페이지에 로그인하지 않고 접속 시도)
404 Not Found: 요청한 리소스가 서버에 존재하지 않음 (ex. 접속을 요청한 페이지가 서버에서 삭제됨)
500 Internal Server Error: 서버 내부의 문제로 요청을 수행할 수 없음 (ex. 아직 에러 핸들링이 구현되지 않은 에러가 발생함)


=====================================

Q1. Movdel, View, Controller는 각각 어떤 역할을 하나요? 교재에서 답을 찾아 ’똑같이’ 적은 후 본인만의 용어로 MVC 패턴에 대해 정리해주세요.
A.
Model에 해당하는 DAO에서는 오로지 특정 조건을 만족하는 데이터를 DB에서 가져오거나 데이터를 조작하는 역할.
view에 해당하는 pug 템플릿은 오로지 사용자에게 보여지는 영역.
controller는 model을 적절히 활용하여 HTTP 요청을 처리하고, 그 결과를 view를 통해 클라이언트에 전달.
MVC 패턴 소프트웨어에서 Model은 직접 데이터를 조회, 조작하는 부분, Controller는 사용자의 요청을 받아 Model을 활용해 데이터를 얻고, 이를 View에 전달하는 부분, View는 전달받은 데이터를 사용자에게 보여주는 부분이다.


Q2. 해당 패턴을 사용하는 장점은 무엇일까요?
일정한 소프트웨어 디자인 패턴을 사용함으로써 유지보수와 협업에 용이하고, 역할에 따라 코드가 구분됨으로써 코드의 재사용성이 높아진다.